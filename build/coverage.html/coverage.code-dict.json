{"/home/travis/build/npmtest/node-npmtest-generator-react-webpack/test.js":"/* istanbul instrument in package npmtest_generator_react_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/lib.npmtest_generator_react_webpack.js":"/* istanbul instrument in package npmtest_generator_react_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_react_webpack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_react_webpack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-react-webpack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_react_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_react_webpack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_react_webpack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_generator_react_webpack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_react_webpack.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_generator_react_webpack.__dirname +\n                    '/lib.npmtest_generator_react_webpack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/node_modules/generator-react-webpack/generators/app/index.js":"'use strict';\nlet generator = require('yeoman-generator');\nlet utils = require('../../utils/all');\nlet prompts = require('./prompts');\nlet path = require('path');\nlet fs = require('fs');\nconst packageInfo = require('../../package.json');\n\n// Set the base root directory for our files\nlet baseRootPath = path.dirname(require.resolve('react-webpack-template'));\n\nmodule.exports = generator.Base.extend({\n\n  constructor: function() {\n    generator.Base.apply(this, arguments);\n\n    // Make options available\n    this.option('skip-welcome-message', {\n      desc: 'Skip the welcome message',\n      type: Boolean,\n      defaults: false\n    });\n    this.option('skip-install');\n\n    // Use our plain template as source\n    this.sourceRoot(baseRootPath);\n\n    this.config.save();\n  },\n\n  initializing: function() {\n    if(!this.options['skip-welcome-message']) {\n      this.log(require('yeoman-welcome'));\n      this.log('Out of the box I include Webpack and some default React components.\\n');\n    }\n  },\n\n  prompting: function() {\n    return this.prompt(prompts, function(props) {\n\n      // Make sure to get the correct app name if it is not the default\n      if(props.appName !== utils.yeoman.getAppName()) {\n        props.appName = utils.yeoman.getAppName(props.appName);\n      }\n\n      // Set needed global vars for yo\n      this.appName = props.appName;\n      this.style = props.style;\n      this.postcss = props.postcss;\n      this.generatedWithVersion = packageInfo.version.split('.').unshift();\n\n      // Set needed keys into config\n      this.config.set('appName', this.appName);\n      this.config.set('appPath', this.appPath);\n      this.config.set('style', this.style);\n      this.config.set('postcss', this.postcss);\n      this.config.set('generatedWithVersion', this.generatedWithVersion);\n\n      this.config.save();\n\n    }.bind(this));\n  },\n\n  configuring: function() {\n\n    // Generate our package.json. Make sure to also include the required dependencies for styles\n    let defaultSettings = this.fs.readJSON(path.join(baseRootPath, 'package.json'));\n    let packageSettings = {\n      name: this.appName,\n      private: true,\n      version: '0.0.1',\n      description: 'YOUR DESCRIPTION - Generated by generator-react-webpack',\n      main: '',\n      scripts: defaultSettings.scripts,\n      repository: '',\n      keywords: [],\n      author: 'Your name here',\n      devDependencies: defaultSettings.devDependencies,\n      dependencies: defaultSettings.dependencies\n    };\n\n    // Add needed loaders if we have special styles\n    let styleConfig = utils.config.getChoiceByKey('style', this.style);\n    if(styleConfig && styleConfig.packages) {\n\n      for(let dependency of styleConfig.packages) {\n        packageSettings.devDependencies[dependency.name] = dependency.version;\n      }\n    }\n\n    // Add postcss module if enabled\n    let postcssConfig = utils.config.getChoiceByKey('postcss', 'postcss');\n    if(this.postcss && postcssConfig && postcssConfig.packages) {\n\n      for(let dependency of postcssConfig.packages) {\n        packageSettings.devDependencies[dependency.name] = dependency.version;\n      }\n    }\n\n    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);\n  },\n\n  writing: function() {\n\n    let excludeList = [\n      'LICENSE',\n      'README.md',\n      'CHANGELOG.md',\n      'node_modules',\n      'package.json',\n      '.travis.yml'\n    ];\n\n    // Get all files in our repo and copy the ones we should\n    fs.readdir(this.sourceRoot(), (err, items) => {\n\n      for(let item of items) {\n\n        // Skip the item if it is in our exclude list\n        if(excludeList.indexOf(item) !== -1) {\n          continue;\n        }\n\n        // Copy all items to our root\n        let fullPath = path.join(baseRootPath, item);\n        if(fs.lstatSync(fullPath).isDirectory()) {\n          this.bulkDirectory(item, item);\n        } else {\n          if (item === '.npmignore') {\n            this.copy(item, '.gitignore');\n          } else {\n            this.copy(item, item);\n          }\n        }\n      }\n    });\n  },\n\n  install: function() {\n    if(this.postcss) {\n      let postcss = require('./postcss');\n      postcss.write(path.join(this.destinationRoot(), 'cfg/defaults.js'));\n    }\n\n    if(!this.options['skip-install']) {\n      this.installDependencies({ bower: false });\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/node_modules/generator-react-webpack/utils/all.js":"'use strict';\n\nconst config = require('./config');\nconst yeoman = require('./yeoman');\n\nmodule.exports = {\n  config,\n  yeoman\n};\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/node_modules/generator-react-webpack/utils/config.js":"'use strict';\nlet opts = require('./configopts.json');\n\n/**\n * Get a setting\n * @param  {String} setting\n * @return {Mixed} setting or null if not found\n */\nlet getSetting = (setting) => {\n  return opts[setting] !== undefined ? opts[setting] : null;\n}\n\n/**\n * Get choices for a given setting\n * @param  {String} setting\n * @return {Mixed} Result or null if nothing was found\n */\nlet getChoices = function getChoices(setting) {\n\n  let config = getSetting(setting);\n  return config && Array.isArray(config.options) ? config.options : null;\n}\n\n/**\n * Get the wanted choice by key\n * @param  {String} setting\n * @param  {String} key\n * @return {Object}\n */\nlet getChoiceByKey = (setting, key) => {\n\n  let choices = getChoices(setting);\n  if(!choices) {\n    return null;\n  }\n\n  let result = null;\n\n  for(let choice of choices) {\n\n    if(choice.name === key) {\n      result = choice;\n      break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Get the default choice for a config setting\n * @param  {String} setting\n * @return {Mixed}\n */\nlet getDefaultChoice = (setting) => {\n  let config = getSetting(setting);\n  return config && config.default !== undefined && config.default.length > 0 ? config.default : null;\n}\n\nmodule.exports = {\n  getSetting,\n  getChoices,\n  getChoiceByKey,\n  getDefaultChoice\n};\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/node_modules/generator-react-webpack/utils/yeoman.js":"'use strict';\n\nconst path = require('path');\nconst configUtils = require('./config');\nconst _ = require('underscore.string');\n\n// Needed directory paths\nconst baseName = path.basename(process.cwd());\n\n/**\n * Get the base directory\n * @return {String}\n */\nlet getBaseDir = () => {\n  return baseName;\n};\n\n/**\n * Get all settings (paths and the like) from components name\n * @param {String} componentName The components name\n * @param {String} style Style language to use [optional]\n * @return {Object} Component settings\n */\nlet getAllSettingsFromComponentName = (componentName, style) => {\n\n  if(!style) {\n    style = 'css';\n  }\n\n  // Clean up the path and pull it to parts\n  let cleanedPaths = getCleanedPathName(componentName);\n  let componentParts = cleanedPaths.split('/');\n  let componentBaseName = _.capitalize(componentParts.pop());\n  let componentPartPath = componentParts.join('/');\n\n  // Get the components displayName property\n  let componentFullName = _.classify(_.replaceAll(componentName, '/', '_'));\n\n  // Configure Styles\n  let stylePaths = configUtils.getChoiceByKey('path', 'style');\n  let styleSettings = configUtils.getChoiceByKey('style', style);\n\n  // Configure components\n  let componentPath = configUtils.getChoiceByKey('path', 'component');\n\n  // Configure tests\n  let testPath = configUtils.getChoiceByKey('path', 'test');\n\n  let settings = {\n    style: {\n      webpackPath: `styles/${componentPartPath}/${componentBaseName}${styleSettings.suffix}`,\n      path: `${stylePaths.path}/${componentPartPath}/`,\n      fileName: `${componentBaseName}${styleSettings.suffix}`,\n      className: getComponentStyleName(componentBaseName),\n      suffix: styleSettings.suffix\n    },\n    component: {\n      webpackPath: `components/${componentPartPath}/${componentBaseName}Component.js`,\n      path: `${componentPath.path}/${componentPartPath}/`,\n      fileName: `${componentBaseName}Component.js`,\n      className: `${componentBaseName}Component`,\n      displayName: `${componentFullName}Component`,\n      suffix: '.js'\n    },\n    test: {\n      path: `${testPath.path}/components/${componentPartPath}/`,\n      fileName: `${componentBaseName}ComponentTest.js`\n    }\n  };\n\n  return settings;\n};\n\n/**\n * Get a cleaned path name for a given path\n * @param {String} path\n * @param {String} suffix [optional]\n * @return {String}\n */\nlet getCleanedPathName = (path, suffix) => {\n\n  if(!suffix) {\n    suffix = '';\n  }\n\n  // If we have filesystem separators, use them to build the full path\n  let pathArray = path.split('/');\n\n  // Build the full components name\n  return pathArray.map((path) => {\n    return _.camelize(_.slugify(_.humanize(path)));\n  }).join('/') + _.capitalize(suffix);\n};\n\n/**\n * Get the css/less/whatever style name to use\n * @param  {String} path\n * @return {String}\n */\nlet getComponentStyleName = (path) => {\n  let fileName = path.split('/').pop().toLowerCase();\n  return _.slugify(_.humanize(fileName)) + '-component';\n};\n\n/**\n * Get a js friendly application name\n * @param  {String} appName The input application name [optional]\n * @return {String}\n */\nlet getAppName = (appName) => {\n\n  // If appName is not given, use the current directory\n  if(appName === undefined) {\n    appName = getBaseDir();\n  }\n\n  return _.camelize(_.slugify(_.humanize(appName)));\n};\n\n/**\n * Get the wanted destination path\n * @param  {String} name Name of the file\n * @param  {String} type The type to use (e.g. action, store, ...)\n * @param  {Suffix} suffix The suffix to use for the file (e.g. Store, Actions, ...)\n * @return {String} Final path\n */\nlet getDestinationPath = (name, type, suffix) => {\n\n  let cleanedPaths = getCleanedPathName(name, suffix);\n  let fsParts = cleanedPaths.split('/');\n  let actionBaseName = _.capitalize(fsParts.pop());\n  let partPath = fsParts.join('/');\n\n  let fsPath = configUtils.getChoiceByKey('path', type).path;\n\n  let parts = [ fsPath ];\n  if(partPath.length > 0) {\n    parts.push(partPath);\n  }\n  parts.push(actionBaseName);\n  let fullPath = parts.join('/');\n\n  return `${fullPath}.js`;\n};\n\n/**\n * Get the destinations class name\n * @param  {String} name Name of the file\n * @param  {String} type The type to use (e.g. action, store, ...)\n * @param  {Suffix} suffix The suffix to use for the file (e.g. Store, Actions, ...)\n * @return {String} The javascript class name to use\n */\nlet getDestinationClassName = (name, type, suffix) => {\n\n  let fixedName = getDestinationPath(name, type, suffix);\n  return _.capitalize(fixedName.split('/').pop().split('.js')[0]);\n};\n\nmodule.exports = {\n  getBaseDir,\n  getAllSettingsFromComponentName,\n  getAppName,\n  getCleanedPathName,\n  getComponentStyleName,\n  getDestinationPath,\n  getDestinationClassName\n};\n","/home/travis/build/npmtest/node-npmtest-generator-react-webpack/node_modules/generator-react-webpack/generators/app/prompts.js":"'use strict';\nconst utils = require('../../utils/all');\n\nmodule.exports = [\n  {\n    type: 'input',\n    name: 'appName',\n    message: 'Please choose your application name',\n    default: utils.yeoman.getAppName()\n  },\n  {\n    type: 'list',\n    name: 'style',\n    message: 'Which style language do you want to use?',\n    choices: utils.config.getChoices('style'),\n    default: utils.config.getDefaultChoice('style')\n  },\n  {\n    type: 'confirm',\n    name: 'postcss',\n    message: 'Enable postcss?',\n    default: false\n  }\n];\n"}